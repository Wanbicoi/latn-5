-- Create custom types
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'assignment_status') THEN
        CREATE TYPE assignment_status AS ENUM(
            'PENDING',
            'IN_PROGRESS',
            'SUBMITTED',
            'APPROVED',
            'REJECTED'
        );
    END IF;
END$$;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'stage_type') THEN
        CREATE TYPE stage_type AS ENUM(
            'ANNOTATE',
            'REVIEW',
            'CONSENSUS',
            'MITL',
            'ROUTER'
        );
    END IF;
END$$;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'notification_type') THEN
        CREATE TYPE notification_type AS ENUM(
            'ASSIGNMENT_CREATED',
            'STATUS_CHANGED',
            'MENTION',
            'TIMEOUT_WARNING'
        );
    END IF;
END$$;

-- Helper function to update timestamps
CREATE OR REPLACE FUNCTION trigger_set_timestamp () RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 1. Users and Roles
-- public_v2 user profiles, linked to Supabase auth users
CREATE TABLE public_v2._users (
    id UUID PRIMARY KEY REFERENCES auth.users (id) ON DELETE CASCADE,
    full_name TEXT,
    avatar_url TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_users" IS 'Stores public_v2 user profile information.';

-- Set up trigger for updating timestamps
CREATE TRIGGER set_users_updated_at BEFORE
UPDATE ON public_v2._users FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp ();

-- Roles for RBAC
CREATE TABLE public_v2._roles (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_roles" IS 'Defines user roles for role-based access control.';

-- 2. Projects and related tables
CREATE TABLE public_v2._projects (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_by UUID NOT NULL REFERENCES public_v2._users (id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_projects" IS 'Represents a project that groups related tasks and data.';

CREATE TRIGGER set_projects_updated_at BEFORE
UPDATE ON public_v2._projects FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp ();

-- Join table for project members and their roles
CREATE TABLE public_v2._project_members (
    project_id UUID NOT NULL REFERENCES public_v2._projects (id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES public_v2._users (id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES public_v2._roles (id) ON DELETE RESTRICT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (project_id, user_id)
);

COMMENT ON TABLE "public_v2"."_project_members" IS 'Assigns users and their roles to projects.';

-- Tags for categorizing projects
CREATE TABLE public_v2._project_tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_project_tags" IS 'Stores tags for filtering and organizing projects.';

-- Join table for project tags
CREATE TABLE public_v2._project_to_tags (
    project_id UUID NOT NULL REFERENCES public_v2._projects (id) ON DELETE CASCADE,
    tag_id BIGINT NOT NULL REFERENCES public_v2._project_tags (id) ON DELETE CASCADE,
    PRIMARY KEY (project_id, tag_id)
);

COMMENT ON TABLE "public_v2"."_project_to_tags" IS 'Links tags to projects.';

-- 3. Data and Models
CREATE TABLE public_v2._data_items (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    project_id UUID NOT NULL REFERENCES public_v2._projects (id) ON DELETE CASCADE,
    content JSONB NOT NULL,
    mime_type VARCHAR(100),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_data_items" IS 'Stores the actual data items to be annotated.';

CREATE TABLE public_v2._models (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    api_endpoint TEXT NOT NULL,
    created_by UUID NOT NULL REFERENCES public_v2._users (id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_models" IS 'Stores information about external models for MITL stages.';

-- 4. Workflows and Stages
CREATE TABLE public_v2._workflows (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_by UUID NOT NULL REFERENCES public_v2._users (id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_workflows" IS 'Defines reusable workflow templates.';

CREATE TRIGGER set_workflows_updated_at BEFORE
UPDATE ON public_v2._workflows FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp ();

CREATE TABLE public_v2._workflow_stages (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    workflow_id UUID NOT NULL REFERENCES public_v2._workflows (id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    type stage_type NOT NULL,
    config JSONB NOT NULL DEFAULT '{}',
    on_success_stage_id UUID REFERENCES public_v2._workflow_stages (id) ON DELETE SET NULL,
    on_failure_stage_id UUID REFERENCES public_v2._workflow_stages (id) ON DELETE SET NULL
);

COMMENT ON TABLE "public_v2"."_workflow_stages" IS 'Defines the nodes (stages) in a workflow template.';

-- 5. Tasks and Assignments
CREATE TABLE public_v2._tasks (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    data_item_id UUID NOT NULL REFERENCES public_v2._data_items (id) ON DELETE CASCADE,
    project_id UUID NOT NULL REFERENCES public_v2._projects (id) ON DELETE CASCADE,
    current_stage_id UUID REFERENCES public_v2._workflow_stages (id) ON DELETE SET NULL,
    is_complete BOOLEAN NOT NULL DEFAULT false,
    completed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_tasks" IS 'Represents a single data item moving through a workflow.';

CREATE TABLE public_v2._task_assignments (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    task_id UUID NOT NULL REFERENCES public_v2._tasks (id) ON DELETE CASCADE,
    stage_id UUID NOT NULL REFERENCES public_v2._workflow_stages (id) ON DELETE CASCADE,
    assigned_to UUID NOT NULL REFERENCES public_v2._users (id) ON DELETE CASCADE,
    status assignment_status NOT NULL DEFAULT 'PENDING',
    review_data JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    submitted_at TIMESTAMPTZ
);

COMMENT ON TABLE "public_v2"."_task_assignments" IS 'Tracks work assigned to users at each stage.';

-- 6. Platform Extensions
CREATE TABLE public_v2._notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public_v2._users (id) ON DELETE CASCADE,
    type notification_type NOT NULL,
    payload JSONB,
    is_read BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_notifications" IS 'Stores user notifications for various events.';

CREATE TABLE public_v2._datasource_integrations (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    orthanc_uuid UUID NOT NULL,
    data JSONB NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

COMMENT ON TABLE "public_v2"."_datasource_integrations" IS 'Stores configuration for external data source integrations.';

CREATE TABLE IF NOT EXISTS public_v2._resources (
    id UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    resource VARCHAR(255) NOT NULL,
    action VARCHAR(255) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    UNIQUE (resource, action)
);

CREATE TABLE IF NOT EXISTS public_v2._role_resources (
    role_id UUID NOT NULL REFERENCES public_v2._roles (id) ON DELETE CASCADE,
    resource_id UUID NOT NULL REFERENCES public_v2._resources (id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, resource_id)
);

-- Function to insert into public_v2._users on new auth.users row
CREATE OR REPLACE FUNCTION public_v2.handle_new_user () RETURNS trigger LANGUAGE plpgsql SECURITY DEFINER
SET
    search_path = '' AS $$
BEGIN
  INSERT INTO public_v2._users (id, full_name, avatar_url)
  VALUES (
    NEW.id,
    CONCAT(
      COALESCE(NEW.raw_user_meta_data ->> 'first_name', ''),
      CASE WHEN (NEW.raw_user_meta_data ->> 'last_name') IS NOT NULL AND (NEW.raw_user_meta_data ->> 'last_name') <> '' THEN
        ' ' || NEW.raw_user_meta_data ->> 'last_name'
      ELSE
        ''
      END
    ),
    NEW.raw_user_meta_data ->> 'avatar_url'
  );
  RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users FOR EACH ROW
EXECUTE PROCEDURE public.handle_new_user ();
